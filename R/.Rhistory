ggsurvfit() +
labs(
x = "Days",
y = "Overall survival probability"
)
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
survfit2(Surv(time, status) ~ 1, data = lung) %>%
ggsurvfit() +
labs(
x = "Days",
y = "Overall survival probability"
)
D = findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 5,
segment = 100)
#' findcutnum
#'
#' Find the optimal number of cut-off points for a continuous risk factor.
#'
#' @param factor The continuous risk factor to be analyzed.
#' @param outcome The outcome data. For survival data, it should be a matrix with two columns: event and time. For logistic data, it should be a vector.
#' @param datatype The type of data: "survival" for survival data or "logistic" for logistic data.
#' @param nmin The minimum number of subjects in each group when finding cut-off points.
#' @param segment The number of segments used to search for cut-off points within the data range.
#'
#' @return A list containing the minimum AIC values for different cut-off numbers.
#'
#' @examples
#' ## Analyzing survival data
#' findcutnum(factor = BMI, outcome = cbind(event, OS), datatype = "survival", nmin = 5, segment = 100)
#'
#' ## Analyzing logistic data
#' findcutnum(factor = invasion, outcome = LVSI, datatype = "logistic", nmin = 5, segment = 100)
#'
#' @export
#'
#' @references
#' Chang, C., Hsieh, M. K., Chang, W. Y., Chiang, A. J., & Chen, J. (2017). Determining the optimal number and location of cutoff points with application to data of cervical cancer. PloS one, 12(4), e0176231.
#'
#' @seealso
#' See also \code{\link{cut}} and \code{\link{glm}}.
#'
#' @keywords
#' cut points, optimal cut-offs, AIC, survival analysis, logistic regression
#'
#'#' @author Payton Yau (Package Development)
#'
#' @family findcut
#'
#' @rdname findcutnum
#'
# Function to find the optimal cut number for a given dataset
findcutnum = function(factor, outcome, datatype, nmin = 20, segment = 100) {
# Check for missing arguments
if (missing(factor))
stop("The argument factor is missing")
if (missing(outcome))
stop("The argument outcome is missing")
if (missing(datatype))
stop("The argument datatype is missing")
# Check datatype for survival data
if (datatype == "survival") {
if (!is.matrix(outcome)) {
stop("The outcome must be a matrix")
}
if (dim(outcome)[2] != 2) {
stop("The outcome's column dimensions must be two")
}
}
# Check datatype for logistic data
if (datatype == "logistic") {
if (!is.vector(outcome))
stop("The argument outcome must be a vector")
}
# Process survival data
if (datatype == "survival") {
# Prepare the data
delta <- data.frame(outcome)
colnames(delta) <- c("event", "time")
userdata <- na.omit(data.frame(delta$event, delta$time, factor))
colnames(userdata) <- c("event", "time", "factor")
index <- order(userdata$factor)
userdata <- userdata[index, ]
n <- dim(userdata)[1]  # Number of subjects
range <- range(userdata$factor)  # Range of continuous predictor
cutunit <- diff(range) / segment  # Calculate the cutting unit
# Initialize variables for AIC calculations
p <- 1
coxfit <- coxph(Surv(userdata$time, userdata$event) ~ userdata$factor)
originAIC <- (-2 * coxfit$loglik[2]) + 2 * p
# Initialize variables for AIC values at each cut
cut1AIC <- c()
start1 <- userdata$factor[nmin]  # Confirm group1 has 20 persons and set the starting cut1 value
end1 <- userdata$factor[n - nmin]  # cut1 end
# Loop to calculate AIC values for cut1
while (start1 < end1) {
group1 <- sum(userdata$factor <= start1)  # Number of group1
factor_status <- c(rep(0, group1), rep(1, n - group1))
coxfit <- coxph(Surv(userdata$time, userdata$event) ~ factor(factor_status))
AIC <- (-2 * coxfit$loglik[2]) + 2 * p
cut1AIC <- c(cut1AIC, AIC)
start1 <- start1 + cutunit
}
# Repeat the above process for cut2, cut3, and cut4 with different groups
# (cut2AIC, cut3AIC, cut4AIC)
#-------------------------------------cut2------------------------------------------------------------#
p=2
cut2AIC=c()
start1=userdata$factor[nmin] #confirmed group1 has 20 person and where cut1 to start cutting
end1=userdata$factor[n-nmin*2]#cut1 end
start2=userdata$factor[which(userdata$factor>start1)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end2=userdata$factor[n-nmin] #cut2 end
while(start1<end1)
{
group1=sum(userdata$factor<=start1) #nummber of group1
while(start2<end2)
{
group2=sum(userdata$factor<=start2)-group1
factor_status=c(rep(0,group1),rep(1,group2),rep(2,n-group1-group2))
coxfit = coxph(Surv(userdata$time,userdata$event) ~ factor(factor_status))
AIC=(-2*coxfit$loglik[2])+2*p
AICc=AIC+(2*p*(p+1)/(n-p-1))
cut2AIC=c(cut2AIC,AIC)
start2=start2+cutunit
}
start1 = start1+cutunit
start2 = userdata$factor[sum(userdata$factor<=start1)+nmin]
}
#-------------------------------------cut3------------------------------------------------------------#
p=3
cut3AIC=c()
start1=userdata$factor[nmin] #confirmed group1 has 20 person and where cut1 to start cutting
d1=userdata$factor[n-nmin*3]#cut1 end
start2=userdata$factor[which(userdata$factor>start1)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end2=userdata$factor[n-nmin*2] #cut2 end
start3=userdata$factor[which(userdata$factor>start2)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end3=userdata$factor[n-nmin]
while(start1<end1)
{
group1=sum(userdata$factor<=start1) #nummber of group1
while(start2<end2)
{
group2=sum(userdata$factor<=start2)-group1
while(start3<end3)
{
group3=sum(userdata$factor<=start3)-group1-group2
factor_status=c(rep(0,group1),rep(1,group2),rep(2,group3),rep(3,n-group1-group2-group3))
coxfit=coxph(Surv(userdata$time,userdata$event) ~ factor(factor_status))
AIC=(-2*coxfit$loglik[2])+2*p
AICc=AIC+(2*p*(p+1)/(n-p-1))
start3=start3+cutunit
cut3AIC=c(cut3AIC,AIC)
}
start2 = start2+cutunit
start3 = userdata$factor[sum(userdata$factor<=start2)+nmin]
}
start1 = start1+cutunit
start2 = userdata$factor[sum(userdata$factor<=start1)+nmin]
}
#-----------------------------------------cut4---------------------------------------------#
p=4
cut4AIC=c()
start1=userdata$factor[nmin] #confirmed group1 has 20 person and where cut1 to start cutting
end1=userdata$factor[n-nmin*4]#cut1 end
start2=userdata$factor[which(userdata$factor>start1)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end2=userdata$factor[n-nmin*3] #cut2 end
start3=userdata$factor[which(userdata$factor>start2)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end3=userdata$factor[n-nmin*2]
start4=userdata$factor[which(userdata$factor>start3)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end4=userdata$factor[n-nmin]
while(start1<end1)
{
group1=sum(userdata$factor<=start1) #nummber of group1
while(start2<end2)
{
group2=sum(userdata$factor<=start2)-group1
while(start3<end3)
{
group2=sum(userdata$factor<=start2)-group1
while(start4<end4)
{
group4=sum(userdata$factor<=start4)-group1-group2-group3
factor_status=c(rep(0,group1),rep(1,group2),rep(2,group3),rep(3,group4),rep(4,n-group1-group2-group3-group4))
coxfit=coxph(Surv(userdata$time,userdata$event) ~ factor(factor_status))
AIC=(-2*coxfit$loglik[2])+2*p
AICc=AIC+(2*p*(p+1)/(n-p-1))
start4=start4+cutunit
cut4AIC=c(cut4AIC,AIC)
}
start3 = start3+cutunit
start4 = userdata$factor[sum(userdata$factor<=start3)+nmin]
}
start2 = start2+cutunit
start3 = userdata$factor[sum(userdata$factor<=start2)+nmin]
}
start1 = start1+cutunit
start2 = userdata$factor[sum(userdata$factor<=start1)+nmin]
}
}#type=sur
#-------------------------------------------------------------------------------------------------------------------#
# Process logistic data
if (datatype == "logistic") {
# Prepare the data
userdata <- na.omit(data.frame(outcome, factor))
index <- order(userdata$factor)
userdata <- userdata[index, ]
n <- dim(userdata)[1]  # Number of subjects
range <- range(userdata$factor)  # Range of continuous predictor
cutunit <- diff(range) / segment  # Calculate the cutting unit
# Fit the logistic regression model
logist_red <- glm(userdata$outcome ~ userdata$factor, family = binomial())
originAIC <- logist_red$aic
# Initialize variables for AIC values at each cut (cut1AIC, cut2AIC, cut3AIC, cut4AIC)
# ...
# Repeat the above process for cut1, cut2, cut3, and cut4 with different groups
#----------------------------------------cut 1 ---------------------------------------------------------#
cut1AIC=c()
start1=userdata$factor[nmin] #confirmed group1 has 20 person and where cut1 to start cutting
end1=userdata$factor[n-nmin]#cut1 end
while(start1<end1)
{
group1=sum(userdata$factor<=start1) #nummber of group1
factor_status=c(rep(0,group1),rep(1,n-group1))
logist_fit =glm(userdata$outcome ~factor(factor_status), family=binomial())
AIC=logist_fit$aic
start1=start1+cutunit
cut1AIC=c(cut1AIC,AIC)
}
#----------------------------------------cut 2 ---------------------------------------------------------#
cut2AIC=c()
start1=userdata$factor[nmin] #confirmed group1 has 20 person and where cut1 to start cutting
end1=userdata$factor[n-nmin*2]#cut1 end
start2=userdata$factor[which(userdata$factor>start1)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end2=userdata$factor[n-nmin] #cut2 end
while(start1<end1)
{
group1=sum(userdata$factor<=start1) #nummber of group1
while(start2<end2)
{
group2=sum(userdata$factor<=start2)-group1
factor_status=c(rep(0,group1),rep(1,group2),rep(2,n-group1-group2))
logist_fit =glm(userdata$outcome ~factor(factor_status),family=binomial())
start2=start2+cutunit
AIC=logist_fit$aic
cut2AIC=c(cut2AIC,AIC)
}
start1 = start1+cutunit
start2 = userdata$factor[sum(userdata$factor<=start1)+nmin]
}
#----------------------------------------cut 3 ---------------------------------------------------------#
cut3AIC=c()
start1=userdata$factor[nmin] #confirmed group1 has 20 person and where cut1 to start cutting
end1=userdata$factor[n-nmin*3]#cut1 end
start2=userdata$factor[which(userdata$factor>start1)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end2=userdata$factor[n-nmin*2] #cut2 end
start3=userdata$factor[which(userdata$factor>start2)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end3=userdata$factor[n-nmin]
while(start1<end1)
{
group1=sum(userdata$factor<=start1) #number of group1
while(start2<end2)
{
group2=sum(userdata$factor<=start2)-group1
while(start3<end3)
{
group3=sum(userdata$factor<=start3)-group1-group2
factor_status=c(rep(0,group1),rep(1,group2),rep(2,group3),rep(3,n-group1-group2-group3))
logist_fit =glm(userdata$outcome ~factor(factor_status), family=binomial())
AIC=logist_fit$aic
cut3AIC=c(cut3AIC,AIC)
start3=start3+cutunit
}
start2 = start2+cutunit
start3 = userdata$factor[sum(userdata$factor<=start2)+nmin]
}
start1 = start1+cutunit
start2 = userdata$factor[sum(userdata$factor<=start1)+nmin]
}
#----------------------------------------cut 4 ---------------------------------------------------------#
cut4AIC=c()
start1=userdata$factor[nmin] #confirmed group1 has 20 person and where cut1 to start cutting
end1=userdata$factor[n-nmin*4]#cut1 end
start2=userdata$factor[which(userdata$factor>start1)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end2=userdata$factor[n-nmin*3] #cut2 end
start3=userdata$factor[which(userdata$factor>start2)[nmin]] #confirmed group2 has 20 person and where cut2 to start cutting
end3=userdata$factor[n-nmin*2]
start4=userdata$factor[which(userdata$factor>start3)[nmin]]
end4=userdata$factor[n-nmin]
while(start1<end1)
{
group1=sum(userdata$factor<=start1) #number of group1
while(start2<end2)
{
group2=sum(userdata$factor<=start2)-group1
while(start3<end3)
{
group3=sum(userdata$factor<=start3)-group1-group2
while(start4<end4)
{
group4=sum(userdata$factor<=start4)-group1-group2-group3
factor_status=c(rep(0,group1),rep(1,group2),rep(2,group3),rep(3,group4),rep(4,n-group1-group2-group3-group4))
logist_fit =glm(userdata$outcome ~factor(factor_status), family=binomial())
AIC=logist_fit$aic
cut4AIC=c(cut4AIC,AIC)
start4=start4+cutunit
}
start3 = start3+cutunit
start4 = userdata$factor[sum(userdata$factor<=start3)+nmin]
}
start2 = start2+cutunit
start3 = userdata$factor[sum(userdata$factor<=start2)+nmin]
}
start1 = start1+cutunit
start2 = userdata$factor[sum(userdata$factor<=start1)+nmin]
}
} #log end
#-------------------------------------------------------------------------------------------------------------------#
# Determine which cut number has the minimum AIC
AICmin <- which.min(c(min(originAIC), min(cut1AIC), min(cut2AIC), min(cut3AIC), min(cut4AIC)))
# Print the result
cat(paste("AIC has a minimum value ", "When cutnum = ", AICmin - 1, "\n", sep = ""))
# Return a list with minimum AIC values
return(list(min = c(min(originAIC), min(cut1AIC), min(cut2AIC), min(cut3AIC), min(cut4AIC))))
}
D = findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 5,
segment = 100)
C = findcut(
factor = B$ph.karno,               # Predictor variable
outcome = cbind(B$status, B$time), # Survival outcome data
cutnum = 2,                 # Number of cutpoints
datatype = "survival",      # Data type for analysis
nmin = 5,                   # Minimum group size
segment = 100               # Number of segments
)
D = findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 5,
segment = 100)
D = findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 3,
segment = 100)
C = findcut(
factor = B$ph.karno,               # Predictor variable
outcome = cbind(B$status, B$time), # Survival outcome data
cutnum = 2,                 # Number of cutpoints
datatype = "survival",      # Data type for analysis
nmin = 2,                   # Minimum group size
segment = 100               # Number of segments
)
c
C
D = findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 10,
segment = 100)
D = while (!is.na(start3) && !is.na(end3) && start3 < end3) {
findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 10,
segment = 100)
}
View(findcutnum)
B[!is.na(B$ph.karno),]
B <- B[!is.na(B$ph.karno),]
D = findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 10,
segment = 100)
View(B)
B = lung
head(B)
# Recode the 'status' column
B$status <- ifelse(B$status == 1, 0, 1)
View(B)
findcut(
factor = B$ph.karno,               # Predictor variable
outcome = cbind(B$status, B$time), # Survival outcome data
cutnum = 2,                 # Number of cutpoints
datatype = "survival",      # Data type for analysis
nmin = 2,                   # Minimum group size
segment = 100               # Number of segments
)
findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 10,
segment = 100)
B <- B[!is.na(B$ph.karno),]
findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 10,
segment = 100)
B = lung
# Recode the 'status' column
B$status <- ifelse(B$status == 1, 0, 1)
B <- B[!is.na(B$ph.karno),]
findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 2,
segment = 100)
View(findcutnum)
B <- B[!is.na(B),]
B = lung
# Recode the 'status' column
B$status <- ifelse(B$status == 1, 0, 1)
B <- B[!is.na(B),]
findcut(
factor = B$ph.karno,               # Predictor variable
outcome = cbind(B$status, B$time), # Survival outcome data
cutnum = 2,                 # Number of cutpoints
datatype = "survival",      # Data type for analysis
nmin = 2,                   # Minimum group size
segment = 100               # Number of segments
)
findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 2,
segment = 100)
# Survival data
BMI = c(30,16,29,29,21,29,27,24,17,27,22,27,26,16,21,21,23,20,25,23,28,20,22,22,37,23,25,34,31,26)
event = c(1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0)
OS = c(138,92,64,15,62,235,214,197,41,33,257,115,123,44,154,71,61,182,75,214,25,217,113,200,175,117,166,0,57,186)
invasion = c(1.1,0.1,1.0,0.8,1.2,1.0,0.3,1.0,0.4,0.6,0.4,0.8,1.0,1.0,1.1,0.5,0.9,1.0,0.6,0.1,1.1,0.4,0.4,1.1,1.1,0.4,1.1,1.2,0.9,0.8)
LVSI = c(0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,1,0,1)
# Function to find optimal cutpoints based on BMI for survival analysis
findcutnum(
factor = BMI,               # Predictor variable
outcome = cbind(event, OS), # Survival outcome data
datatype = "survival",      # Data type for analysis
nmin = 5,                   # Minimum group size
segment = 100               # Number of segments
)
findcutnum(factor = B$ph.karno,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 5,
segment = 100)
BMI = B$ph.karno
event = B$status
OS = B$time
# Function to find optimal cutpoints based on BMI for survival analysis
findcutnum(
factor = BMI,               # Predictor variable
outcome = cbind(event, OS), # Survival outcome data
datatype = "survival",      # Data type for analysis
nmin = 5,                   # Minimum group size
segment = 100               # Number of segments
)
B
BMI = B$meal.cal
event = B$status
OS = B$time
# Function to find optimal cutpoints based on BMI for survival analysis
findcutnum(
factor = BMI,               # Predictor variable
outcome = cbind(event, OS), # Survival outcome data
datatype = "survival",      # Data type for analysis
nmin = 5,                   # Minimum group size
segment = 100               # Number of segments
)
View(lung)
BMI = B$pat.karno
# Function to find optimal cutpoints based on BMI for survival analysis
findcutnum(
factor = BMI,               # Predictor variable
outcome = cbind(event, OS), # Survival outcome data
datatype = "survival",      # Data type for analysis
nmin = 5,                   # Minimum group size
segment = 100               # Number of segments
)
BMI = B$ph.ecog
# Function to find optimal cutpoints based on BMI for survival analysis
findcutnum(
factor = BMI,               # Predictor variable
outcome = cbind(event, OS), # Survival outcome data
datatype = "survival",      # Data type for analysis
nmin = 5,                   # Minimum group size
segment = 100               # Number of segments
)
B = lung
# Recode the 'status' column
B$status <- ifelse(B$status == 1, 0, 1)
findcut(
factor = B$meal.cal,               # Predictor variable
outcome = cbind(B$status, B$time), # Survival outcome data
cutnum = 2,                 # Number of cutpoints
datatype = "survival",      # Data type for analysis
nmin = 2,                   # Minimum group size
segment = 100               # Number of segments
)
findcutnum(factor = B$meal.cal,
outcome = cbind(B$status, B$time),
datatype = "survival",
nmin = 2,
segment = 100)
